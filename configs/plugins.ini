# TO REGISTER A NEW PLUGIN
# 1. Add a new named section (name it whatever you want)
# 2. Create a key named "class" and assign the name of the plugin class to the "class" key
# 3. If your plugin is supposed to operate in a specific controller namespace, create a new key, named "white-space"
#       and assign the controller namespace you want your plugin to operate on.
# 4. If your plugin is supposed not affect controllers within a specific namespace then create a key, named
#       "black-space" and assign the target controller namespace to it.

# EXAMPLE PLUGIN CONFIGURATION
#[MyPlugin]
#class = PLUGIN CLASS NAME
#black-space = CONTROLLER NAMESPACE YOU DO NOT WANT YOUR PLUGIN TO OPERATE ON
#white-space = CONTROLLER NAMESPACE YOU WANT YOUR PLUGIN TO OPERATE ON ONLY.

# YOU CAN ALSO PROVIDE AN ARRAY OF FOR BLACK AND WHITE SPACES
#black-space[] = NAMESPACE 1
#black-space[] = NAMESPACE 2
#black-space[] = NAMESPACE 3

#white-space[] = NAMESPACE 1
#white-space[] = NAMESPACE 2
#white-space[] = NAMESPACE 3

# PLEASE NOTE THAT YOU CANNOT USE WHITE AND BLACK SPACES ALONG EACH OTHER FOR A SINGLE PLUGIN.
# YOU CAN ONLY EITHER WHITE OR BLACK SPACE FOR EVERY PLUGIN.
# IF DO NOT PROVIDE ANY WHITE OR BLACK SPACES FOR YOUR PLUGIN, IT WILL AFFECT EVERY REQUEST YOUR WEB APPLICATION RECEIVES.


# The default request filter plugin simply strips tags off user inputs.
# If you need sophisticated and complicated security checks to be run on user inputs, you can modify the
# securityCheckParam() method of EzRequestFilter class or use EzRequestFilter to create a plugin of yours.

[RequestFilter]
class = \Ez\Plugin\EzRequestFilter
